plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
}

group = project.maven_group
version = "${project.mod_version}+mc${project.minecraft_version}"

loom {
    accessWidenerPath = file('src/main/resources/minimapsync.accesswidener')
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = 'Modrinth'
                url = 'https://api.modrinth.com/maven'
            }
        }
        filter {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        name = "JourneyMap (Public)"
        url = "https://jm.gserv.me/repository/maven-public/"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org/'
    }
    maven {
        name = 'DJTheRedstoner'
        url = 'https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1/'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.parchment_mc_version}:${project.parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    def minimapMod = { name, dependency ->
        if (name == project.run_with) {
            modImplementation dependency
        } else {
            modCompileOnly dependency
        }
    }

    if (!project.voxelmap_version.isEmpty()) {
        minimapMod 'voxelmap', "maven.modrinth:voxelmap-updated:${project.voxelmap_version}"
    }
    if (!project.journeymap_version.isEmpty()) {
        minimapMod 'journeymap', "maven.modrinth:journeymap:${project.journeymap_version}"
    }
    if (!project.journeymap_api_version.isEmpty()) {
        minimapMod 'journeymap', "info.journeymap:journeymap-api:${project.journeymap_api_version}"
    }
    if (!project.xaeros_version.isEmpty()) {
        minimapMod 'xaeros', "maven.modrinth:xaeros-minimap:${project.xaeros_version}"
    }

    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:1.1.0") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }

    implementation 'com.demonwav.mcdev:annotations:2.0.0'
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "mcversion": project.minecraft_version_dependency
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

modrinth {
    if (System.getenv('MODRINTH_TOKEN') == null && project.hasProperty('modrinthKey')) {
        token = project.modrinthKey
    }
    projectId = 'minimap-sync'
    uploadFile = remapJar
    gameVersions = project.minecraft_version_list.split('\\s*,\\s*').toList()
    loaders = ['fabric', 'quilt']
    dependencies {
        required.project 'fabric-api'
        optional.project 'voxelmap-updated'
        optional.project 'journeymap'
        optional.project 'xaeros-minimap'
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
